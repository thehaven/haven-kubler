######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################

keep_environment = CERTFILE : \
                   KEYFILE : \
		   PASSWDFILE : \
		   RELAY_FROM_HOSTS : \
		   RELAY_TO_DOMAINS : \
		   LOCAL_DOMAINS : \
		   SECURITY_BYPASS

log_selector       = \
	           +smtp_confirmation \
	           +smtp_connection \
	           +smtp_protocol_error \
	           +smtp_syntax_error \
	           +smtp_incomplete_transaction \
	           +received_sender \
	           +received_recipients \
	           +sender_on_delivery
log_file_path      = /var/log/exim/exim_%s.log

# Fix for  CVE-2016-1531: https://www.exim.org/static/doc/CVE-2016-1531.txt
add_environment    = <;

# Set message size limit:
message_size_limit = 100M

# Increase limits per queue:
smtp_accept_queue_per_connection = 250
smtp_accept_max = 250

daemon_smtp_ports  = 25 : 465 : 587

# TLS setup:
tls_certificate   = ${env{CERTFILE}{$value} fail} 
tls_privatekey    = ${env{KEYFILE}{$value} fail}
tls_advertise_hosts = *
tls_on_connect_ports = 465

domainlist local_domains = ${env{LOCAL_DOMAINS}{$value} fail}
domainlist relay_to_domains = ${env{RELAY_TO_DOMAINS}{$value} fail}
hostlist   relay_from_hosts = ${env{RELAY_FROM_HOSTS}{$value} fail}
hostlist   security_bypass = ${env{SECURITY_BYPASS}{$value} fail} 
hostlist host_auth_accept_relay = *

exim_user = mail
exim_group = mail

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_content
acl_smtp_dkim = acl_check_dkim

never_users = root

rfc1413_hosts = *
rfc1413_query_timeout = 0s

ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d

helo_accept_junk_hosts = 127.0.0.1

######################################################################
#                       ACL CONFIGURATION                            #
######################################################################

begin acl

# http://wiki.exim.org/SPF
# Add a SPF-Received: header to the message
spf_test:
  accept  hosts          = +security_bypass

  warn    message        = $spf_received
          set acl_m_spf_record = ${lookup dnsdb{txt=$sender_address_domain}{$value}}

  # No SPF record
  accept  !condition     = ${if def:acl_m_spf_record}

  # SPF +all is meaningless
  accept  condition      = ${if match {$acl_m_spf_record}{\\+all}}

  deny    message        = $sender_host_address is not allowed to send mail from $sender_address_domain
          !spf           = pass:none:err_temp
          log_message    = SPF check failed.
          set acl_m_spf_fail = $acl_m_spf_record

  accept

acl_check_rcpt:

  # Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
  # testing for an empty sending host field.
  accept  hosts          = +security_bypass

  # Accept autheticated users:
  accept
          authenticated  = *
          control        = submission/sender_retain

  deny    message        = Senders does not respect MX records
          !hosts         = +relay_from_hosts
          !hosts         = +security_bypass

  warn 	  hosts          = +host_auth_accept_relay
          control        = submission/sender_retain

  deny    message        = Restricted characters in address
          domains        = +local_domains
          local_parts    = ^[.] : ^.*[@%!/|]

  deny    message        = Restricted characters in address
          !domains       = +local_domains
          local_parts    = ^[./|] : ^.*[@%!] : ^.*/\\.\\./

  accept  local_parts    = postmaster
          domains        = +local_domains

  # Be polite and say HELO. Reject anything from hosts that havn't given a valid HELO/EHLO to us.
  deny 	  message       = Bad HELO: Empty HELO, please see RFC 2821 section 4.1.1.1
  	  log_message 	= Bad HELO: Empty HELO, please see RFC 2821 section 4.1.1.1
  	  condition     = ${if eq{$sender_helo_name}{}{yes}{no}}
  	  delay         = 20s

  # Forged hostname -HELOs as one of my own IPs
  deny 	  message 	 = Forged HELO: you are not $sender_helo_name as that is our IP Address and you are not allowed to use it in HELO/EHLO as per RFC Standards.
  	  !hosts         = +relay_from_hosts
  	  !authenticated = *
  	  condition      = ${if eq{$sender_helo_name}{$interface_address}{yes}{no}}
  	  delay          = 20s
  	  log_message    = Forged HELO: you are not $sender_helo_name as that is our IP Address and you are not allowed to use it in HELO/EHLO

  # Forged hostname - HELOs as my own hostname or domain
  deny 	  message        = Forged HELO: you are not $sender_helo_name our local domain and you are not allowed to use as per RFC Standards.
  	  !hosts         = +relay_from_hosts
  	  !authenticated = *
  	  condition      = ${if match_domain{$sender_helo_name}{+local_domains}{yes}{no}}
  	  delay          = 20s

  # Giving no domain name is not valid:
  deny    message        = A valid domain name is required to send to this server!
          log_message    = HELO/EHLO none
          condition      = ${if match {$sender_helo_name}{none} {yes}{no}}

  # Remote user pretending to be localhost
  deny 	  message        = You are not localhost ... go away!
          log_message    = HELO/EHLO localhost
          condition      = ${if match {$sender_helo_name}{localhost} {yes}{no}}

  # Hacked HELO (DOMAIN.com) (constructed by viruses)
  deny    message        = Hacked HELO: you are not $sender_helo_name
          condition      = ${if match {$sender_helo_name}{\N^[A-Z0-9]+\.[a-z]+$\N}{yes}{no}}
          condition      = ${if match {$sender_helo_name}{\N^[0-9]+\.[a-z]+$\N}{no}{yes}}
          !hosts         = +relay_from_hosts
          delay          = 20s
  
  accept  hosts          = +relay_from_hosts

  #SPF Checking:
  # http://wiki.exim.org/SPF
  deny    acl           = spf_test
          message       = [SPF] $sender_host_address is not allowed to send mail from $sender_address_domain
          log_message   = SPF Fail
          condition     = ${if def:acl_m_spf_fail}

  deny   message        = rejected because $sender_host_address is in a black list at $dnslist_domain $dnslist_text
         dnslists       = cbl.abuseat.org : bl.spamcop.net : zen.spamhaus.org : psbl.surriel.com : black.uribl.com
         log_message    = Sender blacklisted and found in $dnslist_domain

  require verify        = sender

  accept  domains       = +local_domains
          endpass
          verify        = recipient

  accept  domains       = +relay_to_domains
          endpass
          verify        = recipient

  deny    message       = relay not permitted

acl_check_content:

  accept  hosts          = +security_bypass

  #Email should have a proper date:
  deny    condition      = ${if !def:h_Date: {1}}
          message        = Message SHOULD have Date: but does not

  accept

acl_check_dkim:

# Some upstream security relays modify links which breaks DKIM - allow through as well as localhost:
  accept  hosts          = +security_bypass
          log_message    = accepting trusted hosts acl_check_dkim security_bypass

# https://www.debian-administration.org/article/721/Validating_SPF_and_DKIM_at_SMTP-time_with_exim
# Deny failures
  deny    dkim_status    = fail
          logwrite       = DKIM test failed: $dkim_verify_reason
          ! hosts        = +security_bypass
          add_header     = X-DKIM: DKIM test failed: (address=$sender_address domain=$dkim_cur_signer), signature is bad.

  # Deny invalid signatures
  deny    dkim_status    = invalid
          add_header     = X-DKIM: $dkim_cur_signer ($dkim_verify_status); $dkim_verify_reason
          ! hosts        = +security_bypass
          logwrite       = DKIM test passed (address=$sender_address domain=$dkim_cur_signer), but signature is invalid.

  # Accept valid/passed sigs
  accept  dkim_status    = pass
          logwrite       = DKIM test passed
          add_header     = X-DKIM: DKIM passed: (address=$sender_address domain=$dkim_cur_signer), signature is good.

  # And anything else.
  accept

######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers

dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
  no_more

#These aliases only apply to the domain to which the email is being sent:
domain_specific_aliases:
  driver = redirect
  local_part_suffix = +* : -*
  local_part_suffix_optional
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/mail/aliases_${domain}}}
  file_transport = address_file
  pipe_transport = address_pipe

#These aliases apply to all domains:
system_aliases:
  driver = redirect
  local_part_suffix = +* : -*
  local_part_suffix_optional
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/mail/aliases}}
  file_transport = address_file
  pipe_transport = address_pipe

userforward:
  driver = redirect
  check_local_user
  local_part_suffix = +* : -*
  local_part_suffix_optional
  file = $home/.forward
  allow_filter
  no_verify
  no_expn
  check_ancestor
  directory_transport = address_directory
  file_transport = address_file
  pipe_transport = address_pipe
  reply_transport = address_reply

localuser:
  driver = accept
  check_local_user
  domains = ${env{LOCAL_DOMAINS}{$value} fail} 
  local_part_suffix = +* : -*
  local_part_suffix_optional
  transport = local_delivery
  cannot_route_message = Unknown user

######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

begin transports

remote_smtp:
  driver = smtp

local_delivery:
  driver = appendfile
  directory = $home/.maildir
  maildir_format
  delivery_date_add
  envelope_to_add
  return_path_add

address_directory:
  driver = appendfile
  maildir_format
  delivery_date_add
  envelope_to_add
  return_path_add

address_pipe:
  driver = pipe
  return_output

address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

address_reply:
  driver = autoreply

######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# Address or Domain    Error       Retries
# -----------------    -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h

######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

begin rewrite

######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

begin authenticators

# For generating users and passwords see link below:
# https://github.com/Exim/exim/wiki/AuthenticatedSmtpUsingPamAndPasswords

plain:

# This authenticator implements the PLAIN authentication mechanism
# (RFC2595).  Since the password is transmitted essentially as clear
# text, a user can only authenticate if the session is encrypted using
# TLS.  The user name and password is first checked against
# /etc/exim4/passwd, then against the system database using PAM (in
# that order).

driver                     = plaintext
public_name                = PLAIN
server_advertise_condition = ${if eq{$tls_cipher}{}{false}{true}}
server_prompts             = :
server_set_id              = $auth2

server_condition           = "\
      ${if exists{${env{PASSWDFILE}{$value} /etc/exim/passwd}}\
        {${lookup{$auth2}lsearch{${env{PASSWDFILE}{$value} /etc/exim/passwd}}\
          {${if crypteq{$auth3}{\\\{md5\\\}${extract{1}{:}{$value}{$value}fail}}\
            {true}{false} }}\
          {${if pam{$auth2:${sg{$auth3}{:}{::}} }\
            {true}{false}} } }}\
        {${if pam{$auth2:${sg{$auth3}{:}{::}} }\
          {true}{false}} }}"

login:

# This authenticator implements the LOGIN authentication mechanism.
# Since the password is transmitted essentially as clear text, a user
# can only authenticate if the session is encrypted using TLS.  The
# user name and password is first checked against /etc/exim4/passwd,
# then against the system database using PAM (in that order).

driver                     = plaintext
public_name                = LOGIN
server_advertise_condition = ${if eq{$tls_cipher}{}{false}{true}}
server_prompts             = Username:: : Password::
server_set_id              = $auth1
server_condition           = "\
      ${if exists{${env{PASSWDFILE}{$value} /etc/exim/passwd}}\
        {${lookup{$1}lsearch{${env{PASSWDFILE}{$value} /etc/exim/passwd}}\
          {${if crypteq{$auth2}{\\\{md5\\\}${extract{1}{:}{$value}{$value}fail}}\
            {true}{false} }}\
          {${if pam{$auth1:${sg{$auth2}{:}{::}} }\
            {true}{false}} } }}\
        {${if pam{$auth1:${sg{$auth2}{:}{::}} }\
          {true}{false}} }}"

# End of Exim configuration file
